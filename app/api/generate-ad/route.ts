import { NextRequest, NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

export const dynamic = "force-dynamic";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { product, offer, audience } = body;

    if (!product || !offer || !audience) {
      return NextResponse.json(
        { error: "Missing required fields: product, offer, and audience." },
        { status: 400 }
      );
    }

    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.9,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
      },
    });

    const chat = model.startChat({ history: [] });

    const prompt = `
You're a creative Google Ads copywriter. Write 3 Google Ads targeting:
- Product: ${product}
- Offer: ${offer}
- Audience: ${audience}

Each ad must include:
1. A short headline (max 30 characters)
2. A persuasive description (max 90 characters)

Format the output as a JSON array of objects, each containing "headline" and "description" keys.:
[{
  "headline": "Your headline here",
  "description": "Your description here"
}, {
  "headline": "Your headline here",
  "description": "Your description here"
}, {
  "headline": "Your headline here",
  "description": "Your description here"
}]
`;

    const result = await chat.sendMessage(prompt);
    const response = result.response;
    const text = response.text();

    console.log("Gemini API Text:", text);

    if (!text) {
      return NextResponse.json(
        { error: "No text generated by Gemini API." },
        { status: 500 }
      );
    }

    // Try to safely parse the text into JSON
    let ads;
    try {
      // Remove code blocks if Gemini wraps it in ```, just in case
      const cleanedText = text.trim().replace(/^```json|```$/g, "").trim();
      ads = JSON.parse(cleanedText);
      console.log("Parsed Ads:", ads);
    } catch (parseError) {
      console.error("Failed to parse Gemini output to JSON:", parseError);
      return NextResponse.json(
        { error: "Failed to parse Gemini response as JSON.", raw: text },
        { status: 500 }
      );
    }

    return NextResponse.json({ ads });
  } catch (error: any) {
    console.error("Gemini API Error:", error);
    return NextResponse.json(
      { error: error.message || "Internal Server Error" },
      { status: 500 }
    );
  }
}
